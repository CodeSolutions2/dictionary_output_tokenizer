// Try 0: Works!
		// outp.innerHTML += 'rowdata: ' + rowdata + "<br/>";
		// outp.innerHTML += 'index: ' + index + "<br/>";

		// Initially determined the name of the dictionary keys and values - valueNames: xs,ys
		// if (index == 0) { const valueNames = Object.keys(rowdata); outp.innerHTML += 'valueNames: ' + valueNames + "<br/>";}

		// X = tf.tensor(Object.values(rowdata.xs));
		// Y = tf.tensor(Object.values(rowdata.ys));

		// OR
		
		// The value of X and Y does not change per rowdata
		// X = await Object.values(rowdata.xs).toString();
		// Y = await Object.values(rowdata.ys).toString();

		 // Convert string tensor to javascript tensor
		 // X = X.toString();
		 // Y = Y.toString();


  // -------------------------------------------------
// How to read rows from a csvDataset
  // -------------------------------------------------

// Way 0 
// This is an object, and can iterate over values in the Object
const csv_iterator = await csvDataset.iterator();
	  
	  const tensors = await csvDataset.toArray();
tensors.forEach(async function(rowdata, index) {

	await csv_iterator.next().then(row => {

	      // row is [object Object] for Try 1 and 2
	     // outp.innerHTML += 'row: ' + row + "<br/>";
		  
	});  // end of await csv_iterator.next().then(row =>

});  // end of forEach


// -------------------------------------------------


// Way 1
// Same output as csvDataset, so just using csvDataset directly
// This is an object, and can iterate over values in the Object
const flattenedDataset = await csvDataset.map(({xs, ys}) => { return {xs:Object.values(xs), ys:Object.values(ys)}; });
// outp.innerHTML += 'flattenedDataset: ' +  flattenedDataset + "<br/>";
const csv_iterator_values = await flattenedDataset.iterator()
   
// This is an object, and can iterate over values in the Object
const csv_iterator = await csvDataset.iterator();
	  
const tensors = await csvDataset.toArray();
tensors.forEach(async function(rowdata, index) {

await csv_iterator_values.next().then(row => {
		
	      // row is [object Object] for Try 1 and 2
	     // outp.innerHTML += 'row: ' + row + "<br/>";
		  
	});  // end of await csv_iterator.next().then(row =>

});  // end of forEach


// -------------------------------------------------

# ---------------------------------------------
# Set up dataset in STORAGE
# ---------------------------------------------
PROJECT_ID="text-pr0cessing"
# ---------------------------------------------
gcloud projects create $PROJECT_ID
# ---------------------------------------------
gcloud config set project $PROJECT_ID
# ---------------------------------------------
# Enable project billing
# Obtain ACCOUNT_ID
gcloud alpha billing accounts list

ACCOUNT_ID=""

# Enable project billing
gcloud alpha billing accounts projects link $PROJECT_ID --billing-account=$ACCOUNT_ID

# View details about billing account
gcloud beta billing accounts describe $ACCOUNT_ID

# ---------------------------------------------

# Create Storage Bucket
BUCKET_NAME="textclassification-w-labeled-data"

LOCATION="europe-west9"
gcloud storage buckets create gs://$BUCKET_NAME --project=$PROJECT_ID \
                                                --default-storage-class=STANDARD \
                                                --location=$LOCATION \
                                                --uniform-bucket-level-access


git clone https://github.com/CodeSolutions2/text_classification_w_labels.git

# Upload file to storage
gcloud storage cp train_dataset0.csv gs://$BUCKET_NAME

gcloud storage ls --recursive gs://$BUCKET_NAME/**

# Make all objects in a bucket publicly readable
gcloud storage buckets add-iam-policy-binding gs://$BUCKET_NAME --member=allUsers --role=roles/storage.objectViewer

# ---------------------------------------------

touch cors.json

echo '[{"origin": ["https://yourdomain.com"],"responseHeader": ["Content-Type"],"method": ["GET", "HEAD"],"maxAgeSeconds": 3600}]' > cors.json

# OR

%%bash --err null
cat > cors.json <<EOF
[
    {
      "origin": ["https://CodeSolutions2.github.io"],
      "responseHeader": ["Content-Type"],
      "method": ["GET", "HEAD"],
      "maxAgeSeconds": 3600
    }
]
EOF

# Set CORS settings
gsutil cors set cors.json gs://$BUCKET_NAME

# ---------------------------------------------

# View saved CORS settings
gsutil cors get gs://$BUCKET_NAME

# ---------------------------------------------


https://cloud.google.com/storage/docs/gsutil/commands/cors

https://stackoverflow.com/questions/66050356/unable-to-fix-cors-policy-on-google-cloud-storage?rq=3

https://stackoverflow.com/questions/51615809/tensorflow-model-server-access-control-allow-origin?rq=3

https://stackoverflow.com/questions/57118200/tensorflowjs-google-storage-cors-error-with-tf-loadlayersmodel

